import dbConnect from "@/lib/mongodb";
import Showtime from "@/models/showtimes";
import Movie from "@/models/movies";
import Cinema from "@/models/cinema";
import Room from "@/models/room";

// L·∫•y showtimes (filter theo movieId, cinemaId, roomId)
// ƒê·ªìng th·ªùi xo√° c√°c su·∫•t chi·∫øu ƒë√£ h·∫øt h·∫°n
export async function GET(req) {
  await dbConnect();
  try {
    const { searchParams } = new URL(req.url);
    let movieId = searchParams.get("movieId");
    const cinemaId = searchParams.get("cinemaId");
    const roomId = searchParams.get("roomId");

    const filter = {};

    if (movieId) {
      // N·∫øu movieId kh√¥ng ph·∫£i ObjectId th√¨ coi nh∆∞ tmdbId
      const isObjectId = /^[0-9a-fA-F]{24}$/.test(movieId);
      if (!isObjectId) {
        const movie = await Movie.findOne({ tmdbId: Number(movieId) });
        if (!movie) {
          return new Response(JSON.stringify({ error: "Phim kh√¥ng t·ªìn t·∫°i" }), {
            status: 404,
            headers: { "Content-Type": "application/json" },
          });
        }
        movieId = movie._id; // chuy·ªÉn sang _id
      }
      filter.movie = movieId;
    }

    if (cinemaId) filter.cinema = cinemaId;
    if (roomId) filter.room = roomId;

    // üßπ Xo√° su·∫•t chi·∫øu ƒë√£ h·∫øt h·∫°n tr∆∞·ªõc khi tr·∫£ v·ªÅ
    await Showtime.deleteMany({ endTime: { $lt: new Date() } });

    // L·∫•y danh s√°ch su·∫•t chi·∫øu c√≤n h·∫°n
    const showtimes = await Showtime.find(filter)
      .populate("movie")
      .populate("cinema")
      .populate("room");

    return new Response(JSON.stringify(showtimes), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("‚ùå GET showtimes error:", error);
    return new Response(
      JSON.stringify({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch su·∫•t chi·∫øu" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

// T·∫°o showtime
export async function POST(req) {
  await dbConnect();
  try {
    const { movieId, cinemaId, roomId, startTime } = await req.json();

    if (!movieId || !cinemaId || !roomId || !startTime) {
      return new Response(JSON.stringify({ error: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o" }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    // check t·ªìn t·∫°i
    const movie = await Movie.findById(movieId);
    if (!movie) {
      return new Response(JSON.stringify({ error: "Phim kh√¥ng t·ªìn t·∫°i" }), {
        status: 404,
        headers: { "Content-Type": "application/json" },
      });
    }

    const cinema = await Cinema.findById(cinemaId);
    if (!cinema) {
      return new Response(JSON.stringify({ error: "R·∫°p kh√¥ng t·ªìn t·∫°i" }), {
        status: 404,
        headers: { "Content-Type": "application/json" },
      });
    }

    const room = await Room.findById(roomId);
    if (!room) {
      return new Response(
        JSON.stringify({ error: "Ph√≤ng chi·∫øu kh√¥ng t·ªìn t·∫°i" }),
        {
          status: 404,
          headers: { "Content-Type": "application/json" },
        }
      );
    }

    // T√≠nh gi·ªù k·∫øt th√∫c = startTime + runtime phim
    const start = new Date(startTime);
    const end = new Date(start.getTime() + movie.runtime * 60000);

    const newShowtime = await Showtime.create({
      movie: movieId,
      cinema: cinemaId,
      room: roomId,
      startTime: start,
      endTime: end,
    });

    await newShowtime.populate("movie cinema room");

    return new Response(JSON.stringify(newShowtime), {
      status: 201,
      headers: { "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("‚ùå POST showtime error:", error);
    return new Response(JSON.stringify({ error: "Kh√¥ng th·ªÉ t·∫°o su·∫•t chi·∫øu" }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
}
